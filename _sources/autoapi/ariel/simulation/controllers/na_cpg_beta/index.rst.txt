:py:mod:`na_cpg_beta`
==================================================

.. py:module:: ariel.simulation.controllers.na_cpg_beta

.. autoapi-nested-parse::

   TODO(jmdm): description of script.

   .. admonition:: Notes

      *

   .. admonition:: References

      [1] https://www.sciencedirect.com/science/article/pii/S2667379722000353

   .. todo::

      [ ] Fix constraint function:
          This requires experimental validation to find the mapping from angular
          velocity to maximum allowed change in the CPG state space.
          The paper determines this information empirically.
      [ ] Implement matrix formulation
      [ ] What should the initial values be???



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   ariel.simulation.controllers.na_cpg_beta.BetaParams
   ariel.simulation.controllers.na_cpg_beta.NaCPGBeta



Functions
~~~~~~~~~

.. autoapisummary::

   ariel.simulation.controllers.na_cpg_beta.create_fully_connected_adjacency
   ariel.simulation.controllers.na_cpg_beta.main



Attributes
~~~~~~~~~~

.. autoapisummary::

   ariel.simulation.controllers.na_cpg_beta.E
   ariel.simulation.controllers.na_cpg_beta.SEED
   ariel.simulation.controllers.na_cpg_beta.RNG
   ariel.simulation.controllers.na_cpg_beta.SCRIPT_NAME
   ariel.simulation.controllers.na_cpg_beta.CWD
   ariel.simulation.controllers.na_cpg_beta.DATA
   ariel.simulation.controllers.na_cpg_beta.console


.. py:data:: E
   :value: 1e-09


.. py:data:: SEED
   :value: 42


.. py:data:: RNG

.. py:data:: SCRIPT_NAME

.. py:data:: CWD

.. py:data:: DATA

.. py:data:: console

.. py:class:: BetaParams

   Bases: :py:obj:`NamedTuple`

   .. autoapi-inheritance-diagram:: ariel.simulation.controllers.na_cpg_beta.BetaParams
      :parts: 1


   .. py:attribute:: a
      :type:  float


   .. py:attribute:: b
      :type:  float


   .. py:attribute:: c
      :type:  float


   .. py:attribute:: d
      :type:  float


.. py:function:: create_fully_connected_adjacency(num_nodes: int) -> dict[int, list[int]]

.. py:class:: NaCPGBeta(adjacency_dict: dict[int, list[int]], alpha: float = 0.1, dt: float = 0.1, angle_limits: tuple[float, float] | None = (-torch.pi / 2, torch.pi / 2), seed: int | None = None, *, clipping: bool = True, angle_tracking: bool = False)

   Bases: :py:obj:`torch.nn.Module`

   .. autoapi-inheritance-diagram:: ariel.simulation.controllers.na_cpg_beta.NaCPGBeta
      :parts: 1


   Implements the Normalized Asymmetric CPG (NA-CPG).


   .. py:attribute:: xy
      :type:  torch.Tensor


   .. py:attribute:: xy_dot_old
      :type:  torch.Tensor


   .. py:attribute:: angles
      :type:  torch.Tensor


   .. py:attribute:: alpha
      :type:  float


   .. py:attribute:: coefficients
      :type:  tuple[float, float, float, float]


   .. py:attribute:: xy_init_value
      :type:  float
      :value: 0.1



   .. py:attribute:: xy_dot_old_init_value
      :type:  float
      :value: 0.1



   .. py:attribute:: phase_params


   .. py:attribute:: w_params


   .. py:attribute:: amplitude_params


   .. py:attribute:: ha_params


   .. py:attribute:: b_params


   .. py:attribute:: adjacency_dict


   .. py:attribute:: n


   .. py:attribute:: angle_tracking
      :value: False



   .. py:attribute:: angle_history
      :value: []



   .. py:attribute:: angle_limits


   .. py:attribute:: clipping
      :value: True



   .. py:attribute:: clamping_error
      :value: 0.0



   .. py:attribute:: dt
      :value: 0.1



   .. py:attribute:: phase


   .. py:attribute:: amplitudes


   .. py:attribute:: w


   .. py:attribute:: ha


   .. py:attribute:: b


   .. py:attribute:: parameter_groups


   .. py:attribute:: num_of_parameters


   .. py:attribute:: num_of_parameter_groups
      :value: 5



   .. py:attribute:: initial_state


   .. py:method:: init_state(value: float, size: int | list[int]) -> torch.Tensor


   .. py:method:: scaled_beta(beta_params: BetaParams, size: int | list[int], *, negative_reflect: bool = True) -> torch.Tensor


   .. py:method:: param_type_converter(params: list[float] | numpy.ndarray | torch.Tensor) -> torch.Tensor


   .. py:method:: set_flat_params(params: torch.Tensor) -> None


   .. py:method:: set_param_with_dict(params: dict[str, torch.Tensor]) -> None


   .. py:method:: set_params_by_group(group_name: str, params: torch.Tensor) -> None


   .. py:method:: get_flat_params() -> torch.Tensor


   .. py:method:: term_a(alpha: float, r2i: float) -> float
      :staticmethod:



   .. py:method:: term_b(zeta_i: float, w_i: float) -> float
      :staticmethod:



   .. py:method:: zeta(ha_i: float, x_dot_old: float) -> float
      :staticmethod:



   .. py:method:: set_state(xy: list[float] | numpy.ndarray | torch.Tensor, xy_dot_old: list[float] | numpy.ndarray | torch.Tensor) -> None


   .. py:method:: reset_state() -> None


   .. py:method:: constraint_function(coefficients: tuple[float, float, float, float], w: float) -> float


   .. py:method:: run_for(steps: int) -> torch.Tensor


   .. py:method:: save(path: str | pathlib.Path) -> None

      Save learnable parameters to file.



   .. py:method:: load(path: str | pathlib.Path) -> None

      Load learnable parameters from file.



   .. py:method:: forward(time: float | None = None) -> torch.Tensor


.. py:function:: main() -> None

